{
  "hash": "1c44b36cd3f77a7ce43275d264efe745",
  "result": {
    "markdown": "---\ntitle: Shor's Algorithm\nauthor: Jonny Comes\ndate: '2022-12-16'\ncategories:\n  - quantum\n  - qiskit\n  - QFT\n  - phase estimation\n  - Shor's Algorithm\nimage: phase_est.png\nformat:\n  html:\n    code-fold: true\ndraft: true\ntoc: true\ncrossref:\n  eq-prefix: ''\n---\n\n## Shor's Algorithm{#sec-intro}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom qiskit import QuantumCircuit\nfrom qiskit.quantum_info.operators import Operator\nfrom qiskit.quantum_info import Statevector\nfrom math import pi\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef cpc(n):\n    '''\n    Returns an n-qubit quantum circuit consisting of a chain \n    of CP-gates to use in the construction of the QFT circuit.\n    '''\n    qc = QuantumCircuit(n, name='   CPC')\n    for k in range(1, n):\n        qc.cp(pi/(2**k), n-1, n-1-k)\n    return qc\n\ndef rev(n):\n    '''\n    Returns an n-qubit quantum circuit that reverses \n    the order of the n qubits.\n    '''\n    qc = QuantumCircuit(n, name='   Rev')\n    for i in range(n//2):\n        qc.swap(i, n-i-1)\n    return qc\n\ndef qft(n):\n    '''\n    Returns the n-qubit QFT circuit.\n    '''\n    qc = QuantumCircuit(n, name=f'  QFT')\n    qc.h(n-1)\n    if n == 1:\n        return qc\n\n    qc.append(cpc(n), range(n))\n    qc.append(qft(n-1), range(n-1))\n    qc.append(rev(n-1), range(n-1))\n    qc.append(rev(n), range(n))\n    return qc\n\ndef phase_est(u, n):\n    '''\n    Returns the quantum circuit for phase estimation depending\n    on the gate u, extended with n-qubits. \n    If measure flag is True, will return with first (top)\n    measurement of first (top) n qubits.\n    '''\n    m = u.num_qubits\n    qc = QuantumCircuit(n+m)\n    \n    for i in range(n):\n        qc.h(m+i)\n    cu = u.control()\n    for i in range(n):\n        for _ in range(2**i):\n            qc.append(cu, [m+i] + list(range(m)))\n    qc.append(qft(n).inverse(), range(m, m+n))\n\n    return qc\n\ndef scatter_phase_estimates(u, input_int=0, qubit_size=12, rare=0.01): \n    '''\n    Produces a scatter plot of the phases estimates.\n    '''\n    u_size = u.num_qubits\n    num_qbits = []\n    probs = []\n    thetas = []\n    for n in range(2, qubit_size + 1):\n        pe = phase_est(u, n)\n        in_state = Statevector.from_int(input_int, 2**(n+u_size)) \n        out_state = in_state.evolve(pe)\n        out_state.draw('latex')\n        prob_dict = out_state.probabilities_dict()\n        states = list(prob_dict.keys())\n        num_qbits += [n for s in states if prob_dict[s] > rare]\n        probs += [prob_dict[s] for s in states if prob_dict[s] > rare]\n        thetas += [int(f'{s[:-u_size]}', base=2)/2**n for s in states if prob_dict[s] > rare]\n    graph = sns.scatterplot(x=num_qbits, y=thetas, size=probs)\n    graph.set_xlabel( \"n\" , size = 12 )\n    graph.set_ylabel( \"Estimate of theta (decimal)\" , size = 12 )\n    plt.show()\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef u_matrix(a, n):\n    N = 2**n\n    row = [0 for _ in range(N)]\n    mtx = [row[:] for _ in range(N)]\n    for j in range(N):\n        i = a*j % N\n        mtx[i][j] = 1\n    return mtx\n\ndef u_gate(a, n):\n    circuit = QuantumCircuit(n)\n    u = Operator(u_matrix(a,n))\n    circuit.unitary(u, range(n), label='U')\n    return circuit.to_gate(label='U')\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\na = 5\nn = 4\nu = u_gate(a, n)\npe = phase_est(u, n)\nin_state = Statevector.from_int(1, 2**(2*n)) \nout_state = in_state.evolve(pe)\nout_state.draw('latex')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n$$\\frac{1}{4} |00000001\\rangle+\\frac{1}{4} |00000101\\rangle+\\frac{1}{4} |00001001\\rangle+\\frac{1}{4} |00001101\\rangle+\\frac{1}{4} |01000001\\rangle- \\frac{i}{4} |01000101\\rangle + \\ldots - \\frac{1}{4} |10001101\\rangle+\\frac{1}{4} |11000001\\rangle+\\frac{i}{4} |11000101\\rangle- \\frac{1}{4} |11001001\\rangle- \\frac{i}{4} |11001101\\rangle$$\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nscatter_phase_estimates(u, input_int=1, qubit_size=n, rare=0.01)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=591 height=425}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}